OOP（Object Oriented Programming）是面向对象编程，说到面向对象我想还是有人和我一样不是很能理解这个对象是什么意思吧，那这儿就拿盖一座大楼来举个例子，盖一座大楼，你想到的是楼怎么盖，哪里要有柱子，哪里要有梁，哪里楼梯等等（这就是面向对象），至于柱子该怎么建，用什么建，方的圆的，等等，这就是面向过程。我大概就是这么理解的😄
还有OOD（面向对象的设计），OOA（面向对象的分析）…

OOP特征分别是封装、继承、多态：

封装：封装是指将对象信息状态通过访问权限修饰符隐藏在对象内部，不允许外部程序直接访问，如果外部程序要访问对象内部，可以调用内部提供的get或set方法。
继承：子类继承了父类所有的成员方法和属性，并且可以拥有自己特性。继承解决了代码的重用问题
多态：父类或接口定义的引用变量可以指向子类或具体实现类的实例对象。提高了程序的拓展性。
五大基本原则：

单一职责原则SRP(Single Responsibility Principle) 类的功能要单一，不能包罗万象，跟杂货铺似的。
开放封闭原则OCP(Open－Close Principle)一个模块对于拓展是开放的，对于修改是封闭的，想要增加功能热烈欢迎，想要修改，哼，一万个不乐意。
里式替换原则LSP(the Liskov Substitution Principle LSP)子类可以替换父类出现在父类能够出现的任何地方。比如你能代表你爸去你姥姥家干活。哈哈~~
依赖倒置原则DIP(the Dependency Inversion Principle DIP)
高层次的模块不应该依赖于低层次的模块，他们都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应该依赖于抽象。就是你出国要说你是中国人，而不能说你是哪个村子的。比如说中国人是抽象的，下面有具体的xx省，xx市，xx县。你要依赖的是抽象的中国人，而不是你是xx村的。
接口分离原则ISP(the Interface Segregation Principle ISP)
设计时采用多个与特定客户类有关的接口比采用一个通用的接口要好。就比如一个手机拥有打电话，看视频，玩游戏等功能，把这几个功能拆分成不同的接口，比在一个接口里要好的多。
方法重写：

参数列表必须完全与被重写的方法相同
返回的类型必须一直与被重写的方法的返回类型相同
访问修饰符的限制一定要大于被重写方法的访问修饰符
重写方法一定不能抛出新的检查异常或者比被重写方法更加宽泛的检查型异常
存在于父类和子类之间，方法被定义为final不能被重写。
————————————————
版权声明：本文为CSDN博主「佛有云 我有钱」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/weixin_42200954/article/details/116205347
