单例模式
单例模式（singleton）保证一个类只有一个实例，并且提供了一个访问全局访问点。
适用性：
当类只能有一个实例而且客户可以从一个访问点访问它时。
当这个实例应该通过子类化可扩展的，并且客户无须更改代码就能使用拓展的实例。



1 单例模式的应用场景
在使用 Unity 开发游戏的时候，经常会需要各种 Manager 类用于管理一些全局的变量和方法，例如最常见的 GameManager 用于记录各种需要在整个游戏过程中持久化的数据。本文以 GameManager 为例，假设我们有以下几个需求：

整个游戏过程中必须有且只有一个 GameManager
在 GameManager 里会记录一个叫 Value 的整型变量
切换游戏场景的时候 GameManager 不能被销毁
有两个游戏场景分别叫 FirstScene 和 SecondScene
每一个场景中都会有一个按钮，点击后会跳转到另一场景，并且对 GameManager.Value 进行 +1 操作
每一个场景中都会显示当前 GameManager.Value 的值


饿汉式：在类加载时就完成了初始化，所以类加载比较慢，但获取对象的速度快。
懒汉式：在类加载时不初始化，等到第一次被使用时才初始化。










https://blog.csdn.net/fangyuwuzhu/article/details/107831052
线程安全：
懒汉式（（volatile&双重检查锁））
顾名思义就是实例在用到的时候才去创建，“比较懒”，用的时候才去检查有没有实例，如果有则返回，没有则新建。
线程安全的懒汉式，利用volatile关键字与双重检查锁保证线程安全。
饿汉式
饿汉式，从名字上也很好理解，就是“比较勤”，实例在初始化的时候就已经建好了，不管你有没有用到，都先建好了再说。好处是没有线程安全的问题，坏处是浪费内存空间。
饿汉式本身就是线程安全的，






/**
 * 单例模式：懒汉式（线程安全的）
 */
public class Test03 {
    private Test03(){}
    private static volatile Test03 instance=null;没有先创建好
    public static Test03 getTest03(){
        if(instance==null){
            synchronized (Test03.class){
                if (instance==null){
                    instance=new Test03();
                }
            }
        }
        return instance;
    }
}
/**
 * 单例模式：饿汉式（线程安全）
 */
public class Test01 {
 
    private Test01(){}
    private static Test01 instance =new Test01();//先创建好
    public static Test01 getTest01(){
        return instance;
    }
}



