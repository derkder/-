出处：netcode里的sample的LobbyController.cs

解释：https://www.zhihu.com/question/485204506/answer/2277171581
中介者模式（Mediator Pattern），是为了“定义一个封装了对象间交互关系的对象”。这种方式避免了显示调用其他类，促进了类间的松耦合，并且使得类间交互关系本身可以单独修改。又叫调停模式。
在现实生活中，常常会出现好多对象之间存在复杂的交互关系，这种交互关系常常是“网状结构”，它要求每个对象都必须知道它需要交互的对象。例如，每个人必须记住他（她）所有朋友的电话；
而且，朋友中如果有人的电话修改了，他（她）必须让其他所有的朋友一起修改，这叫作“牵一发而动全身”，非常复杂。如果把这种“网状结构”改为“星形结构”的话，将大大降低它们之间的“耦合性”，
这时只要找一个“中介者”就可以了。如前面所说的“每个人必须记住所有朋友电话”的问题，只要在网上建立一个每个朋友都可以访问的“通信录”就解决了。
这样的例子还有很多，例如，你刚刚参加工作想租房，可以找“房屋中介”；或者，自己刚刚到一个陌生城市找工作，可以找“人才交流中心”帮忙。在软件的开发过程中，
这样的例子也很多，例如，在 MVC 框架中，控制器（C）就是模型（M）和视图（V）的中介者；还有大家常用的 QQ 聊天程序的“中介者”是 QQ 服务器。所有这些，
都可以采用“中介者模式”来实现，它将大大降低对象之间的耦合性，提高系统的灵活性。

1. 模式的结构中介者模式包含以下主要角色。
抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。
具体中介者（Concrete Mediator）角色：实现中介者接口，定义一个 List 来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。
抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。
具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。

适用性以下场景我建议你考虑使用N个对象之间产生了相互的依赖关系（N>2）。比如机场调度中心、MVC框架、媒体网关、中介服务。多个对象有依赖关系，
但是依赖的行为尚不确定或者有发生改变的可能，在这种情况下一般建议采用中介者模式，降低变更引起的风险扩散。产品开发。一个明显的例子就是MVC框架，
把中介者应用到产品中，可以提升产品的性能和扩展性，但是对项目开发就未必，因此项目是以交付投产为目标，而产品则是以稳定、高效、扩展为宗旨。
