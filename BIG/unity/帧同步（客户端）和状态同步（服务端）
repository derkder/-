一、同步
同步就是要多个客户端表现效果是一致的，而且对于大多数的游戏，不仅仅要表现一致，还要客户端和服务器的数据也是一致的。所以同步是个网络游戏概念，只有网络游戏才需要同步，而单机游戏是不需要同步的。
客户端和服务端可能产生不一样结果的原因：容器【eg.dictionary取东西不确定】的排序不确定性，Coroutine内写逻辑带来的不确定性，物理浮点数，随机数值带来的不确定性，不同的调用顺序，时序，浮点数计算的偏差



二、帧同步
帧同步的代表作当属当下最火的手游王者荣耀了吧，它就是帧同步完成的，也意味着它的核心的战斗逻辑写在客户端。帧同步经常被采用在RTS游戏（Real-Time Strategy ）中。
在游戏中，又客户端给服务器上传玩家的指令，服务器收到指令之后不做任何操作然后转发给所有的客户端。
客户端来运算包括技能逻辑、普攻、属性，伤害、移动、Al、检测、碰撞等一系列的内容，这也是游戏中最核心和最难的部分。所有的客户端运算完成所有接收到的指令，并且修改相应的属性和对应的特效。
        
        
        
三、状态同步
状态同步和帧同步是相反的，它最核心的一系列东西都写在服务器端。当客户端发送要进行操作给服务器，服务器进行一系列的操作运算，然后把相应的结果发送给所有的客户端，
客户端接到数据后修改属性。这里客户端相当于服务器的播放器一样，因为核心的判断都是在服务器的，一切的表现和属性都以服务器为准，就算客户端的血条是满的，服务器的血条是0，那依旧要死。

例子：一个角色要释放一个技能（非指向技能），
客户端告诉服务器我要释放一个技能
服务器通知所有客户端在某个地方以什么方向释放技能
客户端根据收到的信息创建一个特效放在这个地方，然后以某个方向飞行
服务器根据碰撞检测判断到某个时刻碰到了地方英雄，通知客户端
客户端根据服务器发来的信息删除特效，被打到的人减少血量播放收击特效

https://blog.csdn.net/choudan8888/article/details/118414664









四、帧同步的实现
https://blog.csdn.net/wdglhack/article/details/109965636








五、帧同步和状态同步的补充说明
大部分都是状态同步，用协议规定好怎么交流。帧同步的客户端和服务端部署同一份代码，因为客户端服务端传输要很久，服务端计算两秒后的结果，再发送给服务端对照，客户端对比自己和服务端计算出来
的结果，在用插值去改正。(所以netcode大概是帧同步？)
