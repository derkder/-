（1）就起作用的阶段而言： #define是在编译的预处理阶段起作用，而const是在 编译、运行的时候起作用            //！！！！！！                                 

（2）就起作用的方式而言： #define只是简单的字符替换，没有类型检查,存在边界的错误；const对应数据类型，进行类型检查；    //！！！！！！                                                                                                                                                                                                           （3）就存储方式而言：#define只是进行展开，有多少地方使用，就替换多少次，它定义的宏常量在内存中有若干个备份,占用代码段空间；const定义的只读变量在程序运行过程中只有一份备份，占用数据段空间。   

（4）从代码调试的方便程度而言： const常量可以进行调试的，define是不能进行调试的，因为在预编译阶段就已经替换掉了。                                                                                                                                                                                                                    （5）从是否可以再定义的角度而言： const不足的地方，是与生俱来的，const不能重定义，而#define可以通过#undef取消某个符号的定义，再重新定义。

（6）从某些特殊功能而言： define可以用来防止头文件重复引用，而const不能;

（7）从用于类中来看：const用于类成员变量的定义，只要一定义，不可修改。define 不可用于类成员变量的定义，但是可以用于全局变量。

（8）const采用一个普通的常量名称，define可以采用表达式作为名称；






#define 是替换，编译的时候所有写了这个宏的地方都会替换成 #define语句里指定的内容。
const是把具体的值计算好以后放在一块内存空间里，以后再次引用这个量时就不需要重复计算了。





const的作用？指针常量和常量指针？const修饰的函数能否重载？
（1）const修饰符用来定义常量，具有！！！不可变性！！！。在类中，被const修饰的成员函数，不能修改类中的数据成员；
（2）指针常量指的是该指针本身是一个常量，不能被修改，但是指针指向的对象可以被修改，常量指针指的是这个指针指向的对象是一个常量，不能被修改，但是指针本身可以被修改。
这涉及到一个顶层const和底层const的概念：顶层const，本身是const，底层const，指向的对象是const；
（3）const修饰的函数可以重载。const成员函数既不能改变类内的数据成员，也无法调用非const的成员函数；const类对象只能调用const成员函数，
非const对象无论是否是const成员函数都能调用，但是如果有重载的非const函数，非const对象会优先调用重载后的非const函数。
