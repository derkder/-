栈区（stack）— 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。 
为什么栈效率高：
1、有寄存器直接对栈进行访问（esp，ebp），而对堆访问，只能是间接寻址。
也就是说，可以直接从地址取数据放至目标地址；使用堆时，第一步将分配的地址放到寄存器，然后取出这个地址的值，然后放到目标地址。
2、栈中数据cpu命中率更高，满足局部性原理。
3、栈是编译时系统自动分配空间，而堆是动态分配（运行时分配空间），所以栈的速度快。
4、栈是先进后出的队列结构，比堆结构相对简单，分配速度大于堆。

堆区（heap）— 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。 

全局区（静态区）（static）：
—，全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。 
- 程序结束后有系统释放 

文字常量区：
常量字符串就是放在这里的。 程序结束后由系统释放 

自由存储区：
通过new和delete分配和释放空间的内存

程序代码区—存放函数体的二进制代码




栈和堆的区别
1申请方式：栈是系统自动分配，堆是程序员主动申请。
2申请后系统响应：分配栈空间，如果剩余空间大于申请空间则分配成功，否则分配失败栈溢出；申请堆空间，堆在内存中呈现的方式类似于链表（记录空闲地址空间的链表），
在链表上寻找第一个大于申请空间的节点分配给程序，将该节点从链表中删除，大多数系统中该块空间的首地址存放的是本次分配空间的大小，便于释放，将该块空间上的剩余空间再次连接在空闲链表上。
3栈在内存中是连续的一块空间（向低地址扩展）最大容量是系统预定好的，堆在内存中的空间（向高地址扩展）是不连续的。
4申请效率：栈是有系统自动分配，申请效率高，但程序员无法控制；堆是由程序员主动申请，效率低，使用起来方便但是容易产生碎片。
5存放的内容：栈中存放的是局部变量，函数的参数；堆中存放的内容由程序员控制。
