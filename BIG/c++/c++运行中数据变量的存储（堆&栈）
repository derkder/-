栈区（stack）— 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。 
为什么栈效率高：
1、有寄存器直接对栈进行访问（esp，ebp），而对堆访问，只能是间接寻址。
也就是说，可以直接从地址取数据放至目标地址；使用堆时，第一步将分配的地址放到寄存器，然后取出这个地址的值，然后放到目标地址。
2、栈中数据cpu命中率更高，满足局部性原理。
3、栈是编译时系统自动分配空间，而堆是动态分配（运行时分配空间），所以栈的速度快。
4、栈是先进后出的队列结构，比堆结构相对简单，分配速度大于堆。

堆区（heap）— 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表，呵呵。 

全局区（静态区）（static）：
—，全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域， 未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。 
- 程序结束后有系统释放 

文字常量区—常量字符串就是放在这里的。 程序结束后由系统释放 

程序代码区—存放函数体的二进制代码





//main.cpp
int a = 0; //全局初始化区
int a = 0; //全局初始化区
char *p1; //全局未初始化区
main() {
    int b; //栈
    char s[] = "abc"; //栈
    char *p2; //栈
    char *p3 = "123456"; //123456\0在常量区，p3在栈上。
    static int c = 0; //全局（静态）初始化区
    p1 = (char *)malloc(10);
    p2 = (char *)malloc(20);
    //分配得来得10和20字节的区域就在堆区。
    strcpy(p1, "123456"); //123456\0放在常量区，编译器可能会将它与p3所指向的"123456"优化成一个地方。
}
