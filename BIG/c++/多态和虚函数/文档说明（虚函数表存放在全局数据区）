总：
多态（狭义上的）：同一个方法对不同的对象调用行为不同的现象。//！！！！！！！！
重写：同一方法在不同类中的重新实现。
重载：不同的方法。函数重载属于一种多态，叫做特设多态//！！！！！！！！

例子与解释：
https://blog.csdn.net/qq_53558968/article/details/116886784
多态：
class Person //成人
{
  public:
  virtual void fun()
   {
       cout << "全价票" << endl; //成人票全价
   }
};
class Student : public Person //学生
{
   public:
   virtual void fun() //子类完成对父类虚函数的重写
   {
       cout << "半价票" << endl;//学生票半价
   }
};
void BuyTicket(Person* p)
{
   p->fun();
}

int main()
{
   Student st;
   Person p;
   BuyTicket(&st);//子类对象切片过去
   BuyTicket(&p);//父类对象传地址
}

一、上面的代码为了实现多态做了什么：
首先，buyticket函数只是对人这个类实现的，但是我们想要这个函数能对不同的人有不同的实现；
所以，创建学生这个类继承人这个类，并在里面填上学生对于fun函数的实现，virtual void fun()(一个重写函数)
二、虚函数表、虚指针（我的理解是当main函数要执行BuyTicket函数时，它咋知道执行person里的还是student里的的）
当一个类在实现的时候，如果存在一个或以上的虚函数时，那么这个类便会包含一张虚函数表。而当一个子类继承并重载了基类的虚函数时，它也会有自己的一张虚函数表。
当我们在设计类的时候，如果把某个函数设置成虚函数时，也就表明我们希望子类在继承的时候能够有自己的实现方式；如果我们明确这个类不会被继承，那么就不应该有虚函数的出现。
下面是某个基类A的实现：
class A {
public:
    virtual void vfunc1();
    virtual void vfunc2();
            void func1();
            void func2();
private:
    int m_data1, m_data1;
};
从下图中可以看到该类在内存中的存放形式，对于虚函数的调用是通过查虚函数表来进行的，每个虚函数在虚函数表中都存放着自己的一个地址，而如何在虚函数表中进行查找，则是通过虚指针来调用
在内存结构中它一般都会放在类最开始的地方，而对于普通函数则不需要通过查表操作。这张虚函数表是什么时候被创建的呢？它是在编译的时候产生，否则这个类的结构信息中也不会插入虚指针的地址信息。



1 必须通过基类的指针或者引用调用虚函数（不能够调用对象）
2 被调用的函数是虚函数，且必须完成对基类虚函数的重写


虚函数：
https://blog.csdn.net/haoel/article/details/1948051
虚函数表、虚指针:
https://zhuanlan.zhihu.com/p/98776075
