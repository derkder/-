https://www.cnblogs.com/duwenxing/p/7492247.html
假设我们已经有了两个类Father1和Father2，他们都是类GrandFather的子类。现在又有一个新类Son，这个新类通过多继承机制对类Father1和Father2都进行了继承，此时类GrandFather、Father1、Father2和Son的继承关系是一个菱形，仿佛一个钻石，因此这种继承关系在C++中通常被称为钻石继承（或菱形继承）。


钻石(菱形)继承存在什么问题，如何解决？
答：会存在二义性的问题，因为两个父类会对公共基类的数据和方法产生一份拷贝，因此对于子类来说读写一个公共基类的数据或调用一个方法时，不知道是哪一个父类的数据和方法，
也会导致编译错误。可以采用虚继承的方法解决这个问题(父类继承公共基类时用virtual修饰)，这样就只会创造一份公共基类的实例，不会造成二义性。
