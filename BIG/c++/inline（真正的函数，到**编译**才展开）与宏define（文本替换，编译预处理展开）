inline 是一个关键字，可以用于定义内联函数。内联函数，像普通函数一样被调用，但是在调用时并不通过函数调用的机制而是
//！！！！直接在调用点处展开！！！！！/
，这样可以大大减少由函数调用带来的开销，从而提高程序的运行效率。
内联函数不能递归。

 对于内联代码， 程序无需跳到另一个位置处执行代码， 再跳回来。 因此， 内联函数的运行速度比常规函数稍快， 但代价是需要占用更多内存。


区别：
宏定义只进行文本替换，不会对参数的类型、语句能否正常编译等进行检查。而内联函数是真正的函数，会对参数的类型、函数体内的语句编写是否正确等进行检查。
内联函数是真正的函数，和普通函数调用的方法一样，在调用点处直接展开，避免了函数的参数压栈操作，减少了调用的开销。而宏定义编写较为复杂，常需要增加一些括号来避免歧义。
内联函数是在编译时展开，而宏在编译预处理时展开；在编译的时候，内联函数直接被嵌入到目标代码中去，而宏只是一个简单的文本替换。








inline的特点：
  经常调用的小函数最好使用inline
inline的优点：
  1 调用开销小
    在 C/C++ 中，函数调用需要进行栈帧的压入和弹出，这个过程需要消耗额外的时间和空间。而对于 `inline` 函数，编译器会在编译期间将函数代码直接嵌入到调用者中，从而避免了函数调用的开销，从而提高了程序的性能。
  2、 编译器优化
    在编译优化方面，`inline` 常量允许编译器更加深入地分析代码，并对代码进行更多的优化。例如，编译器可以使用函数常量的值来进行常量折叠、分支预测、循环展开等操作，从而进一步提升程序的性能。
    那么有什么要注意的：
inline的缺点：
  需要注意的是，使用 `inline` 常量也有一些限制，如函数体不能过于复杂，同时使用 `inline` 的函数在程序中只能定义一次。因此，在实际应用中，需要根据函数的具体情况和程序的实际需求来选择是否使用 `inline` 常量。
