volatile 和 atomic 是两种用于多线程编程中的关键字或工具，它们帮助程序处理变量在不同线程之间的访问和共享问题。

volatile提醒编译器它后面所定义的变量随时都有可能改变，因此编译后的程序每次需要存储或读取这个变量的时候，都会直接从变量地址中读取数据。
如果没有volatile关键字，则编译器可能优化读取和存储，可能暂时使用寄存器中的值，如果这个变量由别的程序更新了的话，将出现不一致的现象。

atomic 是一种更强大的工具，专门用于保证多线程环境下的原子性操作。原子性操作意味着这个操作是不可分割的——在执行的过程中，任何其他线程都不能中断或观察到这个操作的一部分。
