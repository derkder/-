协程不是进程，也不是线程，它就是一个函数，一个特殊的函数——可以在某个地方挂起，并且可以重新在挂起处继续运行。所以说，协程与进程、线程相比，不是一个维度的概念。
一个进程可以包含多个线程，一个线程也可以包含多个协程，也就是说，一个线程内可以有多个那样的特殊函数在运行。但是有一点，必须明确，一个线程内的多个协程的运行是串行的。（和线程不一样，线程就是异步的）
如果有多核CPU的话，多个进程或一个进程内的多个线程是可以并行运行的，但是一个线程内的多个协程却绝对串行的，无论有多少个CPU（核）。这个比较好理解，毕竟协程虽然是一个特殊的函数，
但仍然是一个函数。一个线程内可以运行多个函数，但是这些函数都是串行运行的。当一个协程运行时，其他协程必须挂起。


原文链接：https://blog.csdn.net/chengqiuming/article/details/80573288
最清楚的博客：https://blog.csdn.net/daaikuaichuan/article/details/82951084


unity:
协程也被叫做轻量级线程。通俗点讲就是定义一大堆任务，然后通过一个线程轮着对每个任务都执行一下，协作运行。它的厉害之处在于每运行到一个任务的时候，它都可以从这个任务上一次中断的地方开始运行。


四、Unity中使用Coroutine需要注意的问题：
1.使用的地方和不能使用的地方：
必须在MonoBehaviour或继承于MonoBehaviour的类中调用 yield coroutine。yield不可以在Update或者FixedUpdate里使用。
2.开启协程：
StartCoroutine(string methodName)和StartCoroutine(IEnumeratorroutine)都可以开启一个协程，
区别：
使用字符串作为参数时，开启协程时最多只能传递一个参数，并且性能消耗会更大一点; 而使用IEnumerator 作为参数则没有这个限制。
3.删除协程：
1).在Unity3D中，使用StopCoroutine(stringmethodName)来终止该MonoBehaviour指定方法名的一个协同程序，使用StopAllCoroutines()来终止所有该MonoBehaviour可以终止的协同程序。
包括StartCoroutine(IEnumerator routine)的。
2).还有一种方法可以终止协同程序，即将协同程序所在gameobject的active属性设置为false，当再次设置active为ture时，协同程序并不会再开启；
如是将协同程序所在脚本的enabled设置为false则不会生效。
4.js和C#中使用区别：
在C#中要使用 yield return而不是yield。
C#中yield（中断）语句必须要在IEnumerator类型里，C#方法的返回类型为IEnumerator，返回值如（eg:yield return new WaitForSeconds(2); 或者 yield returnnull);
5.协程函数返回值和参数类型，组合的设计模式：
协同程序的返回类型为Coroutine类型。在Unity3D中，Coroutine类继承于YieldInstruction，所以，协同程序的返回类型只能为null、等待的帧数(frame)以及等待的时间。
协同程序的参数不能指定ref、out参数。但是，我们在使用WWW类时会经常使用到协同程序，由于在协同程序中不能传递参数地址(引用)，也不能输出对象，
这使得每下载一个WWW对象都得重写一个协同程序，解决这个问题的方法是建立一个基于WWW的类（用组合模式来解决-其实就是不通过函数传参全局关联一个对象了），
参考: https://blog.csdn.net/blues1021/article/details/40959915






 private void Start()
{
    Debug.Log("Start method");
    StartCoroutine(TestCoroutine());
    Debug.Log("Start method ends");
}
 
private IEnumerator TestCoroutine()
{
      Debug.Log("TestCoroutine");
      while(true)
      {
           Debug.Log("HereW);
           yield return null;
           Debug.Log("There");
      }
}
private void Update(){Debug.Log("Update");}
It logs as:
Start method
TestCoroutine
Here
Start method ends
Update
There
Here
Update
There
Here
…
https://unitygem.wordpress.com/2016/01/27/coroutine/



https://blog.csdn.net/liubing8609/article/details/81700284
线程之间通信方式
一般而言，在一个应用程序（即进程）中，一个线程往往不是孤立存在的，常常需要和其它线程通信，以执行特定的任务。如主线程和次线程，次线程与次线程，工作线程和用户界面线程等。
这样，线程与线程间必定有一个信息传递的渠道。这种线程间的通信不但是难以避免的，而且在多线程编程中也是复杂和频繁的。线程间的通信涉及到4个问题：
线程间如何传递信息；
线程之间如何同步，以使一个线程的活动不会破坏另一个线程的活动，以保证计算结果的正确合理；
当线程间具有依赖关系时，如何调度多个线程的处理顺序；
如何避免死锁问题。
在windows系统中，线程间的通信一般采用四种方式：全局变量方式、消息传递方式、参数传递方式和线程同步法。
