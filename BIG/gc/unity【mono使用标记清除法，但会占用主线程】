总所周知，内存是程序运行时所需要的重要资源，在程序运行时往往需要内存来临时存储各种数据，但是操作系统提供给进程的堆内存（注意是堆内存，栈上的内存会随函数调用自动被回收，
下文提及的都是指堆内存）是有限的，所以我们需要对这有限的资源进行管理，

Unity 中的GC
Unity的脚本后端是基于Mono的实现（当然现在多了个IL2CPP，不过也是类似的GC实现)，而Mono使用的GC是所谓的Boehm–Demers–Weiser garbage collector。是Mark-Sweep 的实现，
它会在需要进行GC时占用主线程，进行遍历-标记-垃圾回收的过程，然后在归还主线程控制权。这会导致帧数的突然下降，产生卡顿（不过因为该实现是非压缩式的，所以卡顿现象相对较轻，
但是对内存利用率进一步下降了，会有内存碎片的问题。。囧）。所以我们需要慎重地处理对象的创建（内存请求），还有释放（使用GC管理内存是没有主动释放内存的接口的，
但是我们可以通过消除对某个对象的引用来做到这一点）。此外，Unity的代码分为两部分：托管与非托管，GC影响的只有托管部分的代码使用的堆内存。而且这个托管堆占用的地址空间不会返还给操作系统。


GC的优化
上文讲到了GC对性能影响的原因（占用主线程进行大量工作），而优化GC即是减小占用GC占用主线程时花费的CPU时间，所以优化GC优化的是CPU时间，而非内存，事实上常见的优化GC的手段之一就是占用内存。。。

特别的技巧♂
1.关闭GC
可以把需要的内存先全部创建完，然后关掉GC，不过感觉这种方式应用场景太有限。
2.主动定时GC
游戏的卡顿来自与不稳定的帧数变化（稳定的低帧数和不稳定的高帧数前者可以带来更平滑的体验），所以可以按一定间隔主动地调用 System.GC.Collect 进行GC，这样就不会有剧烈的毛刺产生，当然这个间隔不能太小， 
否则就和不主动调用区别不大，但也不能太小，否则会对帧数造成明显影响，具体数值的确定还是很难的。
3.主动扩大托管堆
Mono的GC会尽量避免内存的扩展，所以说它对判断 需要进行GC 了的阈值比较低，可能已分配内存达到当前GC管理内存的70%~80%就会进行GC了，如果GC的持有内存足够大的话，就会减少GC的触发，
可以通过类似下面的代码



https://zhuanlan.zhihu.com/p/265217138
