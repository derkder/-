1.3 为什么不能用C#进行热更新？
Android支持JIT，但是IOS不允许获取具有可执行权限的内存空间，这就直接要求JIT要以full AOT模式，这种模式把IL直接翻译成机器码而不是在运行期间。因此不能通过直接更新DLL文件更新代码。
1.4 为什么Lua可以进行热更新？
Lua是使用C写的脚本语言，在运行时读入Lua编写的代码，在解释Lua时不是翻译为机器码，而是使用C代码进行解释，不用开辟可执行权限的内存空间，也不会有新代码执行，
执行解释的是用C语言写出来的虚拟机。

其他热更方案：
ILRunTime，可热更部分打成一个单独的.dll文件，打包成AssetBundle，下载后利用反射进行代码逻辑的更新。好处使用C#书写，方便调试，缺点是某些C#高级语法，特别是各种反射不够稳定，实战项目少。


完整解释版：
1.Unity一般使用C#代码实现逻辑，真正让手机执行C#写的逻辑步骤如下：
  1.1 C#代码预先编译成IL，然后把IL存到动态链接库中(.dll文件)。
  1.2JIT编译，程序运行时，将.dll文件中的IL解释为所在平台的机器码，开辟一段内存空间，要求这段内存空间可读、可写、可执行，然后CPU执行之前解释出来的机器码。

其中涉及到两个东西：
1.1 IL 中间语言(中间代码) 
间语言(中间代码)是一种面向语法，易于翻译成目标程序的源程序的等效内部表示代码。其可理解性及易于生成目标代码的程度介于源语言和目标语言之间。
1.2 JIT编译
运行时需要代码时，将 Microsoft中间语言(MSIL) 转换为机器码的编译。
1.3 为什么不能用C#进行热更新？
Android支持JIT，但是IOS不允许获取具有可执行权限的内存空间，这就直接要求JIT要以full AOT模式，这种模式把IL直接翻译成机器码而不是在运行期间。因此不能通过直接更新DLL文件更新代码。
1.4 为什么Lua可以进行热更新？
Lua是使用C写的脚本语言，在运行时读入Lua编写的代码，在解释Lua时不是翻译为机器码，而是使用C代码进行解释，不用开辟可执行权限的内存空间，也不会有新代码执行，执行解释的是用C语言写出来的虚拟机。
1.5 其他热更方案：
ILRunTime，可热更部分打成一个单独的.dll文件，打包成AssetBundle，下载后利用反射进行代码逻辑的更新。好处使用C#书写，方便调试，缺点是某些C#高级语法，特别是各种反射不够稳定，实战项目少。



原文链接：https://blog.csdn.net/qq_19269527/article/details/103314725
