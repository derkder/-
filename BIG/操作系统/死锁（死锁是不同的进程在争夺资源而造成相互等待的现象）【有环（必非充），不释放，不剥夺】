要造成死锁，必须满足以下的四种条件。
1.互斥条件：进程对所分配的资源不允许其他进程访问
2.请求和保持条件：在等待资源的过程中不会释放资源
3.不可剥夺：其他进程不可以强制剥夺该资源
4.环路等待：必然存在一条进程资源的环形链




解决死锁
上文提及，造成死锁必须满足四个条件。那么我们就可以破坏其中任意一个条件来解决死锁。
1.互斥条件：当超时未释放时允许访问
2.请求和保持条件：一次性分配资源不需要等待
3.不可剥夺：超时判定死锁时可以强制剥夺
4.环路等待： 终止某一个进程，破坏该链




第二次整理：

死锁条件：
  1）互斥条件（一个资源每次只能被一个进程使用）；
  2）请求并保持条件（因请求资源而阻塞时，对已获得的资源保持不放）；
  3）不剥夺条件（在未使用完之前，不能剥夺，只能自己释放）；
  4）循环等待（若干进程之间形成一种头尾相接的循环等待资源关系）。

死锁防止：
  1）死锁预防，打破四个死锁条件；
  2）死锁避免，使用算法来进行资源分配，防止系统进入不安全状态，如银行家算法；
  3）死锁检测和解除，抢占资源或者终止进程；
 
银行家算法是一种最有代表性的避免死锁的算法。在避免死锁方法中允许进程动态地申请资源，但系统在进行资源分配之前，应先计算此次分配资源的安全性，
若分配不会导致系统进入不安全状态，则分配，否则等待。为实现银行家算法，系统必须设置若干数据结构。安全的状态指的是一个进程序列{P1,P2,...Pn}，
对于每一个进程Pi，它以后尚需要的资源不大于当前资源剩余量和其余进程所占有的资源量之和。
